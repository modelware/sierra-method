/*
 * Read the OML project settings file 
 */
 var app = new org.yaml.snakeyaml.Yaml().load(file("oml.yml").text)
 
/* 
 * The project's info
 */
ext.title = app.project.name
description = app.project.description

/* 
 * The Maven coordinates
 */
group = app.maven.group
ext.artifact = app.maven.artifact
version = app.maven.version

/*
 * Dataset-specific variables
 */
ext.dataset_name = hasProperty("dataset") ? getProperty("dataset") :  "main" /* default */
ext.dataset = app.datasets.get(dataset_name)

/* 
 * The Gradle plugins 
 */
apply plugin: 'base'
apply plugin: 'oml'

/*
 * The Gradle task dependencies
 */
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath 'org.yaml:snakeyaml:2.+'
		classpath 'io.opencaesar.owl:owl-fuseki-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-query-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-load-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-save-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:2.+'
		classpath 'io.opencaesar.oml:oml-merge-gradle:2.+'
		classpath 'io.opencaesar.adapters:oml2owl-gradle:2.+'
		classpath 'io.opencaesar.adapters:owl2oml-gradle:2.+'
	}
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	mavenCentral()
}

/*
 * The OML dependencies
 */
dependencies {
	app.dependencies.each { oml it }
}

/*
 * A task to extract and merge the OML dependencies
 * @seeAlso https://github.com/opencaesar/oml-tools/blob/master/oml-merge/README.md
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask, group:"oml", dependsOn: configurations.oml) {
	inputZipPaths = configurations.oml.files
	outputCatalogFolder = file('build/oml')
}

/*
 * A task to convert the OML catalog to OWL catalog
 * @seeAlso https://github.com/opencaesar/owl-adapter/blob/master/oml2owl/README.md
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, group:"oml", dependsOn: downloadDependencies) {
	inputCatalogPath = file('catalog.xml')
	outputCatalogPath = file('build/owl/catalog.xml')
	generateRules = true
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-reason/README.md
 */
task reason(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	catalogPath = file('build/owl/catalog.xml')
	inputOntologyIri = dataset.iri
	specs = dataset.entailments.collect { dataset.iri+'/'+it }
	reportPath = file('build/logs/reasoning.xml')
	uniqueNames = true
}

/*
 * Start the headless Fuseki server
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-doc/README.md
 */
task startFuseki(type: io.opencaesar.owl.fuseki.StartFusekiTask, group:"oml", dependsOn: reason) {
	configurationPath = file("fuseki.ttl")
	outputFolderPath = file(".fuseki")
	webUI = true
}

/*
 * Stop the headless Fuseki server
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-fuseki/README.md
 */
task stopFuseki(type: io.opencaesar.owl.fuseki.StopFusekiTask, group:"oml") {
	outputFolderPath = startFuseki.outputFolderPath
}

/*
 * A task to load an OWL catalog to a TDB-persisted Fuseki dataset endpoint
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-load/README.md
 */
task loadTdb(type:io.opencaesar.owl.load.OwlLoadTask, group:"oml", dependsOn: startFuseki) {
	inputs.files(startFuseki.outputFolderPath.toString()+"fuseki.pid") // rerun when fuseki restarts
	catalogPath = file('build/owl/catalog.xml')
	endpointURL = dataset.url+".tdb"
	fileExtensions = ['owl', 'ttl']
	iris = [ dataset.iri ]
}

/*
 * A task to load an OWL catalog to a Fuseki dataset endpoint
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-load/README.md
 */
task load(type:io.opencaesar.owl.load.OwlLoadTask, group:"oml", dependsOn: loadTdb) {
	inputs.files(startFuseki.outputFolderPath.toString()+"fuseki.pid") // rerun when fuseki restarts
	catalogPath = file('build/owl/catalog.xml')
	endpointURL = dataset.url
	fileExtensions = ['owl', 'ttl']
	iris = dataset.entailments.collect { k,v -> dataset.iri+'/'+k }
	loadToDefaultGraph = true
}

/*
 * A task to run a set of SPARQL queries on a Fuseki dataset endpoint
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-query/README.md
 */
task query(type:io.opencaesar.owl.query.OwlQueryTask, group:"oml", dependsOn: load) {
	inputs.files(load.inputs.files) // rerun when the dataset changes
	endpointURL = dataset.url
	queryPath = file(dataset.queries)
	resultPath = file("build/results/${dataset_name}")
	format = 'json'
}

/*
 * A task to save a Fuseki dataset endpoint to an OWL catalog
 * @seeAlso https://github.com/opencaesar/owl-tools/blob/master/owl-save/README.md
 */
task save(type:io.opencaesar.owl.save.OwlSaveTask, group:"oml") {
	inputs.files(startFuseki.outputFolderPath.toString()+"fuseki.pid") // rerun when fuseki restarts
	endpointURL = dataset.url+".tdb"
	catalogPath = file("build/save/${dataset_name}/catalog.xml")
	fileExtension = 'ttl'
}

/*
 * A task to convert the OWL catalog to OML catalog
 * @seeAlso https://github.com/opencaesar/owl-adapter/blob/master/owl2oml/README.md
 */
task owlToOml(type:io.opencaesar.owl2oml.Owl2OmlTask, dependsOn: [downloadDependencies, save]) {
	inputCatalogPath = save.catalogPath
	outputCatalogPath = file('catalog.xml')
	doNotUpdatePaths = [ file('build/oml') ] + dataset.doNotUpdate.collect(f -> file(f))
	inputFileExtensions = ['ttl']
	outputFileExtension = 'oml'
}


/*
 * A task to check the project's build artifacts
 * @seeAlso https://docs.gradle.org/current/userguide/base_plugin.html
 */
tasks.named('check') {
	dependsOn reason
}

/*
 * Define project's artifacts
 */
task omlZip(type: Zip, group:"oml") {
	from file('src/oml')
	include "**/*.oml"
	destinationDirectory = file('build/libs')
	archiveBaseName = project.ext.artifact
	archiveVersion = project.version
}

artifacts.default omlZip

/*
 * Publish project artifacts to maven
 */
apply plugin: 'maven-publish'
apply plugin: 'signing'

def pomConfig = {
	licenses {
	license {
		name "The Apache Software License, Version 2.0"
		url "http://www.apache.org/licenses/LICENSE-2.0.txt"
		distribution "repo"
	}
	}
	developers {
	developer {
		id "melaasar"
		name "Maged Elaasar"
		email "melaasar@gmail.com"
	}
	}
	scm {
	url 'https://github.com/opencaesar/'+rootProject.name
	}
}

publishing {
	publications {
	maven(MavenPublication) {
		groupId project.group
		artifactId project.ext.artifact
		version project.version
		artifact omlZip
		pom {
		packaging = 'zip'
		withXml {
			def root = asNode()
			if (configurations.find { it.name == 'oml' }) {
			def dependencies = root.appendNode('dependencies')
			configurations.oml.resolvedConfiguration.resolvedArtifacts.each {
				def dependency = dependencies.appendNode('dependency')
				dependency.appendNode('groupId', it.moduleVersion.id.group)
				dependency.appendNode('artifactId', it.moduleVersion.id.name)
				dependency.appendNode('version', it.moduleVersion.id.version)
				if (it.classifier != null) {
				dependency.appendNode('classifier', it.classifier)
				dependency.appendNode('type', it.extension)
				}
			}
			}
			root.appendNode('name', project.ext.title)
			root.appendNode('description', project.description)
			root.appendNode('url', 'https://github.com/opencaesar/'+rootProject.name)
			root.children().last() + pomConfig
		}
		}
	}
	}
}

signing {
	def pgpSigningKey = project.findProperty('pgpSigningKey')
	if (pgpSigningKey != null) { pgpSigningKey = new String(pgpSigningKey.decodeBase64()) }
	def pgpSigningPassword = project.findProperty('pgpSigningPassword')
	useInMemoryPgpKeys(pgpSigningKey, pgpSigningPassword)
	sign publishing.publications.maven
}

gradle.taskGraph.whenReady { taskGraph ->
	signMavenPublication.onlyIf { taskGraph.allTasks.any{it.name == 'publishMavenPublicationToSonatypeRepository'} }
}

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
	synchronizationTasks downloadDependencies
}
